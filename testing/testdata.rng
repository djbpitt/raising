<?xml version="1.0" encoding="UTF-8"?>
<!--
  * testdata DTD
  *
  * v1 Rough sketch (target for test scripts, basis for analysis scripts)
  *
-->
<!--
  * Revisions:
  * 2018-07-17 : CMSMcQ : make first cut
  *
-->
<!--
  * A testdata document consists of a number of run elements, 
  * optionally preceded by one or more paragraphs with 
  * whatever information we wish to convey in prose.
  *
-->
<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <start><ref name="testdata"/></start>
  <define name="testdata">
    <element name="testdata">
      <ref name="attlist.testdata"/>
      <zeroOrMore>
        <ref name="p"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="run"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.testdata" combine="interleave">
    <empty/>
  </define>
  <!--
    * Each run element reports on one run of a process.  It records:
    *
    * environmental data (the date, who ran the test, the system it was 
    *     run on)
    * processor
    * method 
    * implementation 
    * input file
    * output file
    * processor diagnostics (output of -t or similar option)
    * system timing (as produced by time ...)
    * misc comments (as needed)
    *
  -->
  <define name="run">
    <element name="run">
      <ref name="attlist.run"/>
      <ref name="date"/>
      <ref name="syst"/>
      <ref name="proc"/>
      <ref name="meth"/>
      <ref name="impl"/>
      <ref name="input"/>
      <ref name="output"/>
      <ref name="processor-messages"/>
      <ref name="timing"/>
    </element>
  </define>
  <define name="attlist.run" combine="interleave">
    <empty/>
  </define>
  <!--
    * The date element records when the test was run.  (Scripts will
    * use something like echo '<date>'`date`'</date>' to produce it.)
    * its isodate attribute provides a standardized form.  Like all
    * attributes here, the attribute may be provided by the test
    * script or omitted; when omitted, we'll use later programs to
    * provide the attributes.  Programs that produce summaries and
    * graphs should be able to rely on the attributes
    *
  -->
  <define name="date">
    <element name="date">
      <ref name="attlist.date"/>
      <text/>
    </element>
  </define>
  <define name="attlist.date" combine="interleave">
    <optional>
      <attribute name="isodate"/>
    </optional>
  </define>
  <!--
    * syst indicates what system the test was run on.  At the moment,
    * this is completely unstructured, but should be made consistent
    * for each system.  E.g. 'Salerno', 'meister', ...  The sysid
    * attribute is for later use.
    *
  -->
  <define name="syst">
    <element name="syst">
      <ref name="attlist.syst"/>
      <text/>
    </element>
  </define>
  <define name="attlist.syst" combine="interleave">
    <optional>
      <attribute name="sysid">
        <data type="NMTOKEN"/>
      </attribute>
    </optional>
  </define>
  <!--
    * proc identifies the processor used to run the test.  The procid
    * attribute should be as specified in
    * raising/testing/processors.xml.
    *
  -->
  <define name="proc">
    <element name="proc">
      <ref name="attlist.proc"/>
      <text/>
    </element>
  </define>
  <define name="attlist.proc" combine="interleave">
    <optional>
      <attribute name="procid">
        <data type="NMTOKEN"/>
      </attribute>
    </optional>
  </define>
  <!--
    * meth identifies the method or approach.  The methid attribute
    * should be as specified in raising/testing/methods.xml.
    *
  -->
  <define name="meth">
    <element name="meth">
      <ref name="attlist.meth"/>
      <text/>
    </element>
  </define>
  <define name="attlist.meth" combine="interleave">
    <optional>
      <attribute name="methid">
        <data type="NMTOKEN"/>
      </attribute>
    </optional>
  </define>
  <!--
    * impl identifies the specific implementation of the method used
    * in this run.  The implid attribute should be as specified in
    * raising/testing/methods.xml.  
    *
  -->
  <define name="impl">
    <element name="impl">
      <ref name="attlist.impl"/>
      <text/>
    </element>
  </define>
  <define name="attlist.impl" combine="interleave">
    <optional>
      <attribute name="implid">
        <data type="NMTOKEN"/>
      </attribute>
    </optional>
  </define>
  <!--
    * The input element identifis the input file used in the run.  The
    * inputid attribute should be as specified in
    * raising/testing/input.xml.
    *
  -->
  <define name="input">
    <element name="input">
      <ref name="attlist.input"/>
      <text/>
    </element>
  </define>
  <define name="attlist.input" combine="interleave">
    <optional>
      <attribute name="inputid">
        <data type="NMTOKEN"/>
      </attribute>
    </optional>
  </define>
  <!--
    * The output element identifis the output file produced in the run.  
    * From the filename it should be possible to identify input, impl,
    * and proc.  But we do not save output forever: the file may be
    * overwritten by another run of the same processor/input/code
    * combination.  (If output should be saved, copy it someplace
    * safe.)  The main use of saved output is checking that the result
    * is correct.
    *
    * We don't provide an output ID; all outputs can be recreated at
    * need.
    *
  -->
  <define name="output">
    <element name="output">
      <ref name="attlist.output"/>
      <text/>
    </element>
  </define>
  <define name="attlist.output" combine="interleave">
    <empty/>
  </define>
  <!--
    * The processor-messages element provides a bag into which we
    * dump whatever output the processor produces when asked for
    * timing information.  (That can be none.)
    *
  -->
  <!--
    * Example:  xsltproc:  
    Parsing stylesheet raise_xslt10.xsl took 0 ms
    Parsing document ../input/brown/r02.0052.xml took 0 ms
    Running stylesheet and saving result took 3673 ms
        *
  -->
  <!--
    * Example: Saxon 6.5.5:
    
    SAXON 6.5.5 from Michael Kay
    Java version 1.8.0_65
    Preparation time: 143 milliseconds
    Processing file:/Users/cmsmcq/2018/talks/Balisage-late-breaking/raising/outside-in/../input/brown/r02.0052.xml
    Building tree for file:/Users/cmsmcq/2018/talks/Balisage-late-breaking/raising/outside-in/../input/brown/r02.0052.xml using class com.icl.saxon.tinytree.TinyBuilder
    Tree built in 33 milliseconds
    Loading java.net.URI
    Execution time: 668 milliseconds
        *
  -->
  <!--
    * Example:  Saxon 9.8 HE:  
    Saxon-HE 9.8.0.12J from Saxonica
    Java version 1.8.0_65
    Stylesheet compilation time: 786.191114ms
    Processing file:/Users/cmsmcq/2018/talks/Balisage-late-breaking/raising/outside-in/../input/brown/r02.0052.xml
    Using parser com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser
    Building tree for file:/Users/cmsmcq/2018/talks/Balisage-late-breaking/raising/outside-in/../input/brown/r02.0052.xml using class net.sf.saxon.tree.tiny.TinyBuilder
    Tree built in 10.028675ms
    Tree size: 342 nodes, 716 characters, 226 attributes
    Execution time: 276.890537ms
    Memory used: 27,601,976
        *
  -->
  <define name="processor-messages">
    <element name="processor-messages">
      <ref name="attlist.processor-messages"/>
      <text/>
    </element>
  </define>
  <!--
    * The examples above motivate the choice of attributes. 
    * ssprep = "Parsing stylesheet", "Preparation time", 
    *   "Stylesheet compilation time"
    * docprep = "Parsing document", "Tree built in"
    * runtime = "Running ...", "Execution time"
    * 
    * We do not now extract internal-view memory usage.
    *
  -->
  <define name="attlist.processor-messages" combine="interleave">
    <optional>
      <attribute name="ssprep"/>
    </optional>
    <optional>
      <attribute name="docprep"/>
    </optional>
    <optional>
      <attribute name="runtime"/>
    </optional>
  </define>
  <!--
    * The timing element provides a bag into which we dump the output 
    * of the 'time' command (or analogous).
    * The attributes record real time, user time, system time, and
    * the sum of user and system tim.
    *
  -->
  <define name="timing">
    <element name="timing">
      <ref name="attlist.timing"/>
      <text/>
    </element>
  </define>
  <define name="attlist.timing" combine="interleave">
    <optional>
      <attribute name="r"/>
    </optional>
    <optional>
      <attribute name="u"/>
    </optional>
    <optional>
      <attribute name="s"/>
    </optional>
    <optional>
      <attribute name="us"/>
    </optional>
  </define>
  <!-- * Misc prose * -->
  <define name="p">
    <element name="p">
      <ref name="attlist.p"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="code"/>
          <ref name="emph"/>
          <ref name="hi"/>
          <ref name="ident"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.p" combine="interleave">
    <empty/>
  </define>
  <define name="code">
    <element name="code">
      <ref name="attlist.code"/>
      <text/>
    </element>
  </define>
  <define name="attlist.code" combine="interleave">
    <empty/>
  </define>
  <define name="emph">
    <element name="emph">
      <ref name="attlist.emph"/>
      <text/>
    </element>
  </define>
  <define name="attlist.emph" combine="interleave">
    <empty/>
  </define>
  <define name="hi">
    <element name="hi">
      <ref name="attlist.hi"/>
      <text/>
    </element>
  </define>
  <define name="attlist.hi" combine="interleave">
    <empty/>
  </define>
  <define name="ident">
    <element name="ident">
      <ref name="attlist.ident"/>
      <text/>
    </element>
  </define>
  <define name="attlist.ident" combine="interleave">
    <empty/>
  </define>
</grammar>
